void guessGame(int guessLimit) {
    int secretNum = 1;
    int index = 0;
    int guessNum;

    while(index < guessLimit) {
        cout << "Enter your number: ";
        cin >> guessNum;

        if (guessNum == secretNum) {
            cout << "U win";
            break;
        }
        else {
            index += 1;
        }
    }
}
double power(double base, int powerNum) {
    double result = 1;
    for (int i=0; i < powerNum; ++i) {
        result = result * base;
    }
    return result;
}
template <typename T> T myMax(T x, T y) {
    return (x > y) ? x : y;
}
namespace first {
    int x = 1;
}
//using namespace first;
double hypotenuse(double x, double y){
    return sqrt(power(x, 2) + power(y, 2));
}















template<typename T> void mySwap(T &a, T &b) {
    T box = a;
    a = b;
    b = box;
}
void Format_string(){
    printf("Characters: %c %c \n", 'a', 65);
    printf("Decimals: %d %ld\n", 1977, 650000L);
    printf("Preceding with blanks: %10d \n", 1977);
    printf("Preceding with zeros: %010d \n", 1977);
    printf("Some different radices: %d %x %o %#x %#o \n", 100, 100, 100, 100, 100);
    printf("floats: %4.2f %+.0e %E \n", 3.1416, 3.1416, 3.1416);
    printf("Width trick: %*d \n", 5, 10);
    printf("%s \n", "A string");
}
void Relational_operators(){
    //instead of printing 0 and 1, create an array where //0 = False, 1 = True
    string TorF[] = { "False", "True" };
    int a = 50, b = 6, c = 6;

    //Print out the string values of each relational operation
    printf("%d < %d is %s.\n", a, b, TorF[a < b].c_str());
    printf("%d > %d is %s.\n", a, b, TorF[a > b].c_str());
    printf("%d != %d is %s.\n", a, b, TorF[a != b].c_str());
    printf("%d >= %d is %s.\n", b, c, TorF[b >= c].c_str());
    printf("%d <= %d is %s.\n", b, c, TorF[b <= c].c_str());
}